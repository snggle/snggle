import 'dart:convert';

import 'package:codec_utils/codec_utils.dart';
import 'package:cryptography_utils/cryptography_utils.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:isar/isar.dart';
import 'package:snggle/infra/entities/transaction_entity/transaction_entity.dart';
import 'package:snggle/shared/models/transactions/transaction_model.dart';

void main() {
  group('Tests of TransactionModel.fromEntity() constructor', () {
    test('Should [return TransactionModel] from given TransactionEntity', () {
      // Arrange
      TransactionEntity actualTransactionEntity = const TransactionEntity(
        id: 1,
        walletId: 1,
        creationDate: '2024-07-01T13:45:41.420590Z',
        signDataType: SignDataType.typedTransaction,
        amount: '0.019321570386261305 ETH',
        fee: '0.001496331786753402 ETH',
        functionData:
            '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000667aac7700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000004ceda9bf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000004cbc6dcd',
        contractAddress: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
        senderAddress: '0x03f04cb5d332eccb602d8efe463c921140cfca09',
        signature: '0x6f115b38753bddd14db7b9bb26b132be8f355abdde63dbcdf6fdbd94de774ce8058c544d50b5eed1936d57063cca5922eace9ffcb2b907c793a9c376d5bd6d6b00',
        signDate: '2024-07-01T13:45:42.999751Z',
      );

      // Act
      TransactionModel actualTransactionModel = TransactionModel.fromEntity(actualTransactionEntity);

      // Assert
      TransactionModel expectedTransactionModel = TransactionModel(
        id: 1,
        walletId: 1,
        creationDate: DateTime.parse('2024-07-01T13:45:41.420590Z'),
        signDataType: SignDataType.typedTransaction,
        amount: '0.019321570386261305 ETH',
        fee: '0.001496331786753402 ETH',
        functionData:
            '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000667aac7700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000004ceda9bf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000004cbc6dcd',
        contractAddress: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
        senderAddress: '0x03f04cb5d332eccb602d8efe463c921140cfca09',
        signature: '0x6f115b38753bddd14db7b9bb26b132be8f355abdde63dbcdf6fdbd94de774ce8058c544d50b5eed1936d57063cca5922eace9ffcb2b907c793a9c376d5bd6d6b00',
        signDate: DateTime.parse('2024-07-01T13:45:42.999751Z'),
      );

      expect(actualTransactionModel, expectedTransactionModel);
    });
  });

  group('Tests of TransactionModel.fromCborEthSignRequest() constructor', () {
    test('Should [return TransactionModel] from given CborEthSignRequest', () {
      // Arrange
      CborEthSignRequest actualCborEthSignRequest = CborEthSignRequest(
        requestId: base64Decode('ukI9tqeOQHKqM6StM6LwZw=='),
        signData: base64Decode('AvGDqjanAYRZaC8AhFu8hkmCUgiUR5spcPA/kCHP8AtuWAe6VE6jUfiHEcN5N+CAAIDA'),
        dataType: CborEthSignDataType.typedTransaction,
        chainId: 11155111,
        derivationPath: const CborCryptoKeypath(
          components: <CborPathComponent>[
            CborPathComponent(index: 44, hardened: true),
            CborPathComponent(index: 60, hardened: true),
            CborPathComponent(index: 0, hardened: true),
            CborPathComponent(index: 0, hardened: false),
            CborPathComponent(index: 0, hardened: false)
          ],
          sourceFingerprint: 2539474417,
        ),
        address: '0xd6c63265857c51ee794964d2f98431b02db87ee7',
      );

      // Act
      TransactionModel actualTransactionModel = TransactionModel.fromCborEthSignRequest(1, actualCborEthSignRequest);

      // Assert
      TransactionModel expectedTransactionModel = TransactionModel(
        id: Isar.autoIncrement,
        walletId: 1,
        creationDate: actualTransactionModel.creationDate,
        signDataType: SignDataType.typedTransaction,
        amount: '0.005 ETH',
        fee: '0.000032320717821 ETH',
        senderAddress: '0xd6c63265857c51ee794964d2f98431b02db87ee7',
        recipientAddress: '0x479b2970f03f9021cff00b6e5807ba544ea351f8',
      );

      expect(actualTransactionModel, expectedTransactionModel);
    });
  });

  group('Tests of TransactionModel.toEntity()', () {
    test('Should [return TransactionEntity] from given TransactionModel', () {
      // Arrange
      TransactionModel actualTransactionModel = TransactionModel(
        id: 1,
        walletId: 1,
        creationDate: DateTime.parse('2024-07-01T13:45:41.420590Z'),
        signDataType: SignDataType.typedTransaction,
        amount: '0.019321570386261305 ETH',
        fee: '0.001496331786753402 ETH',
        functionData:
            '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000667aac7700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000004ceda9bf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000004cbc6dcd',
        contractAddress: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
        senderAddress: '0x03f04cb5d332eccb602d8efe463c921140cfca09',
        signature: '0x6f115b38753bddd14db7b9bb26b132be8f355abdde63dbcdf6fdbd94de774ce8058c544d50b5eed1936d57063cca5922eace9ffcb2b907c793a9c376d5bd6d6b00',
        signDate: DateTime.parse('2024-07-01T13:45:42.999751Z'),
      );

      // Act
      TransactionEntity actualTransactionEntity = actualTransactionModel.toEntity();

      // Assert
      TransactionEntity expectedTransactionEntity = const TransactionEntity(
        id: 1,
        walletId: 1,
        creationDate: '2024-07-01T13:45:41.420590Z',
        signDataType: SignDataType.typedTransaction,
        amount: '0.019321570386261305 ETH',
        fee: '0.001496331786753402 ETH',
        functionData:
            '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000667aac7700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000004ceda9bf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000004cbc6dcd',
        contractAddress: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
        senderAddress: '0x03f04cb5d332eccb602d8efe463c921140cfca09',
        signature: '0x6f115b38753bddd14db7b9bb26b132be8f355abdde63dbcdf6fdbd94de774ce8058c544d50b5eed1936d57063cca5922eace9ffcb2b907c793a9c376d5bd6d6b00',
        signDate: '2024-07-01T13:45:42.999751Z',
      );

      expect(actualTransactionEntity, expectedTransactionEntity);
    });
  });

  group('Tests of TransactionModel.addSignature()', () {
    test('Should [return TransactionModel] with new signature', () {
      // Arrange
      TransactionModel actualTransactionModel = TransactionModel(
        id: 1,
        walletId: 1,
        creationDate: DateTime.parse('2024-07-01T13:45:41.420590Z'),
        signDataType: SignDataType.typedTransaction,
        amount: '0.019321570386261305 ETH',
        fee: '0.001496331786753402 ETH',
        functionData:
            '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000667aac7700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000004ceda9bf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000004cbc6dcd',
        contractAddress: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
        senderAddress: '0x03f04cb5d332eccb602d8efe463c921140cfca09',
      );

      // Act
      TransactionModel actualNewTransactionModel = actualTransactionModel.addSignature('signature');

      // Assert
      TransactionModel expectedNewTransactionModel = TransactionModel(
        id: 1,
        walletId: 1,
        creationDate: DateTime.parse('2024-07-01T13:45:41.420590Z'),
        signDataType: SignDataType.typedTransaction,
        amount: '0.019321570386261305 ETH',
        fee: '0.001496331786753402 ETH',
        functionData:
            '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000667aac7700000000000000000000000000000000000000000000000000000000000000040b080604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000044a4ddab603539000000000000000000000000000000000000000000000000000000004ceda9bf00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f8000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c0000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000006000000000000000000000000016980b3b4a3f9d89e33311b5aa8f80303e5ca4f80000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000004cbc6dcd',
        contractAddress: '0x3fc91a3afd70395cd496c647d5a6cc9d4b2b7fad',
        senderAddress: '0x03f04cb5d332eccb602d8efe463c921140cfca09',
        signature: 'signature',
        signDate: actualNewTransactionModel.signDate,
      );

      expect(actualNewTransactionModel, expectedNewTransactionModel);
    });
  });

  group('Tests of TransactionModel.title getter', () {});
}
